[{"C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\index.tsx":"1","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\App.tsx":"3","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyAppBar.tsx":"4","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyChatForm.tsx":"5","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\nav\\Settings.tsx":"6","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyTextField.tsx":"7","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyNavMenu.tsx":"8","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\services\\openaiService.ts":"9","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyChatWindow.tsx":"10","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyDropDown.tsx":"11"},{"size":499,"mtime":1681618941465,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1681586826666,"results":"14","hashOfConfig":"13"},{"size":1226,"mtime":1681686711026,"results":"15","hashOfConfig":"13"},{"size":1345,"mtime":1681580888145,"results":"16","hashOfConfig":"13"},{"size":2718,"mtime":1681686819417,"results":"17","hashOfConfig":"13"},{"size":6066,"mtime":1681796695065,"results":"18","hashOfConfig":"13"},{"size":4147,"mtime":1681685959665,"results":"19","hashOfConfig":"13"},{"size":2374,"mtime":1681579171600,"results":"20","hashOfConfig":"13"},{"size":1075,"mtime":1681581964197,"results":"21","hashOfConfig":"13"},{"size":2085,"mtime":1681681781617,"results":"22","hashOfConfig":"13"},{"size":1908,"mtime":1681619924621,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qp9iow",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\index.tsx",[],[],"C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\App.tsx",[],[],"C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyAppBar.tsx",["64","65"],[],"import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Menu from '@mui/material/Menu';\r\nimport MyNavMenu from './MyNavMenu';\r\n\r\ninterface MyAppBarProps {\r\n  sx?: {\r\n    position?: string;\r\n    top?: number;\r\n    zIndex?: number;\r\n    width?: string;\r\n  };\r\n}\r\n\r\nconst MyAppBar: React.FC<MyAppBarProps> = ({ sx }) => {\r\n  const [drawerOpen, setDrawerOpen] = React.useState(false);\r\n\r\n  const handleMenuClick = () => {\r\n    setDrawerOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setDrawerOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"fixed\" sx={sx}>\r\n        <Toolbar sx={{ justifyContent: 'flex-start' }}>\r\n          <IconButton\r\n            size=\"large\"\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            sx={{ mr: 2 }}\r\n            onClick={handleMenuClick}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <MyNavMenu drawerOpen={drawerOpen} handleClose={handleClose} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyAppBar;","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyChatForm.tsx",["66","67","68"],[],"import React, { useState, useEffect } from \"react\";\r\nimport MyTextField from \"./MyTextField\";\r\nimport MyChatWindow from \"./MyChatWindow\";\r\nimport { Box, Grid } from \"@mui/material\";\r\nimport promptGPT from \"../services/openaiService\";\r\n\r\ninterface Message {\r\n  text: string;\r\n  isUser: boolean;\r\n}\r\n\r\nconst MyChatForm: React.FC = () => {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);\r\n  const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n\r\n  const updateViewportSize = () => {\r\n    setViewportHeight(window.innerHeight);\r\n    // setViewportWidth(window.innerWidth);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', updateViewportSize);\r\n    return () => {\r\n      window.removeEventListener('resize', updateViewportSize);\r\n    };\r\n  }, []);\r\n\r\n  const handleTextSubmit = (text: string) => {\r\n    const userMessage: Message = { text, isUser: true };\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n    const fetchResponse = async () => {\r\n      const response = await promptGPT(text);\r\n      if (response !== null) {\r\n        const aiMessage: Message = { text: response, isUser: false };\r\n        setMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n      }\r\n    };\r\n\r\n    fetchResponse();\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        height: `${viewportHeight}px`,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          flexGrow: 1,\r\n          overflowY: \"auto\",\r\n          backgroundColor: \"transparent\",\r\n          width: \"100%\",\r\n          maxWidth: \"md\",\r\n          marginTop: \"64px\",\r\n          \r\n          '&::-webkit-scrollbar': {\r\n            width: '6px',\r\n            backgroundColor: 'transparent',\r\n          },\r\n          '&::-webkit-scrollbar-thumb': {\r\n            borderRadius: '3px',\r\n            backgroundColor: '#aaa',\r\n          },\r\n          '&::-webkit-scrollbar-track': {\r\n            borderRadius: '3px',\r\n            backgroundColor: 'transparent',\r\n          }, \r\n        }}\r\n      >\r\n        <MyChatWindow messages={messages} />\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          position: \"sticky\",\r\n          bottom: 0,\r\n          zIndex: 1,\r\n          backgroundColor: \"transparent\",\r\n          paddingBottom: \"15px\",\r\n          paddingTop: \"15px\",\r\n          width: \"100%\",\r\n          maxWidth: \"md\",\r\n          margin: \"0 auto\",\r\n        }}\r\n      >\r\n        <MyTextField messages={messages} onSubmit={handleTextSubmit} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChatForm;\r\n","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\nav\\Settings.tsx",["69"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Box, Slider, Typography, Divider } from \"@mui/material\";\r\nimport MyDropDown from \"../components/MyDropDown\";\r\nimport { SelectChangeEvent } from \"@mui/material/Select\";\r\nimport { UserSettings } from \"../models/settingsModel\";\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nconst Settings: React.FC = () => {\r\n  const fixedUserId = \"adiaconou\";\r\n\r\n  // State to hold the current value of the slider\r\n  const [languageProficiency, setLanguageProficiency] = useState<number>(5); // Default value\r\n  const [languageChoice, setLanguageChoice] = useState<string>(\"Greek\");\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n  // Handle slider value change\r\n  const handleLanguageProficiencyChange = (\r\n    event: Event,\r\n    newValue: number | number[],\r\n    activeThumb: number\r\n  ) => {\r\n    setLanguageProficiency(newValue as number);\r\n\r\n    const userSettings: UserSettings = {\r\n      userId: 'adiaconou',\r\n      settings: {\r\n        languageChoice: languageChoice,\r\n        languageProficiency: newValue as number,\r\n      },\r\n    };\r\n\r\n    updateUserSettings(userSettings);\r\n  };\r\n\r\n  const handleLanguageChoiceChange = (event: SelectChangeEvent<string>) => {\r\n    setLanguageChoice(event.target.value);\r\n\r\n\r\n    const userSettings: UserSettings = {\r\n      userId: 'adiaconou',\r\n      settings: {\r\n        languageChoice: event.target.value,\r\n        languageProficiency: languageProficiency,\r\n      },\r\n    };\r\n\r\n    updateUserSettings(userSettings);\r\n  };\r\n\r\n  // Fetch user settings on component mount and update state values\r\n  useEffect(() => {\r\n    getUserSettings(fixedUserId).then((userSettings) => {\r\n      if (userSettings && userSettings.settings) {\r\n        setLanguageChoice(userSettings.settings.languageChoice);\r\n        setLanguageProficiency(userSettings.settings.languageProficiency);\r\n      }\r\n      setIsLoading(false);\r\n    });\r\n  }, []); // Empty dependency array ensures this effect only runs on component mount\r\n\r\n  async function sendLogToBackend(logMessage: string): Promise<void> {\r\n    const response = await fetch(`http://localhost:3001/log`, {\r\n      method: 'POST',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({ message: logMessage })\r\n    });\r\n\r\n    const result = await response.json();\r\n    console.log(\"Result: \" + result);\r\n  }\r\n\r\n  async function getUserSettings(userId: string): Promise<UserSettings | null> {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:3001/user-settings/${userId}`\r\n      );\r\n\r\n      // Check if the response status code indicates success\r\n      if (!response.ok) {\r\n        throw new Error(`Server responded with status ${response.status}`);\r\n      }\r\n\r\n      const userSettings: UserSettings = await response.json();\r\n      console.log(\"userSettings: \" + userSettings);\r\n      sendLogToBackend(\"User settings retrieved: \" + JSON.stringify(userSettings));\r\n      return userSettings;\r\n    } catch (error) {\r\n      sendLogToBackend(\"Error fetching user settings: \" + error);\r\n      console.error(\"Error fetching user settings:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async function updateUserSettings(userSettings: UserSettings): Promise<UserSettings | null> {\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/user-settings/${userSettings.userId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userSettings),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error updating user settings');\r\n      }\r\n      const updatedUserSettings: UserSettings = await response.json();\r\n      return updatedUserSettings;\r\n\r\n    } catch (error) {\r\n      console.error(`Error attempting to update user settings: ${error}`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          height: '100vh',\r\n        }}\r\n      >\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        height: \"100vh\",\r\n        color: \"white\",\r\n        paddingTop: \"16px\", // Optional padding from the top\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <Box\r\n        className=\"setting_pageTitle\"\r\n        sx={{ marginBottom: \"30px\", marginTop: \"64px\", width: \"75%\" }}\r\n      >\r\n        <Typography sx={{ fontWeight: \"bold\", fontSize: \"24px\" }}>\r\n          Prompt Settings\r\n        </Typography>\r\n      </Box>\r\n      <Box\r\n        className=\"setting_languageChoice\"\r\n        sx={{ marginTop: \"4px\", width: \"75%\" }}\r\n      >\r\n        <Divider\r\n          sx={{\r\n            width: \"100%\",\r\n            marginBottom: \"16px\",\r\n            borderColor: \"lightgrey\",\r\n            opacity: 0.2,\r\n          }}\r\n        />\r\n\r\n        <Typography sx={{ fontSize: \"14px\" }}>Language</Typography>\r\n        <MyDropDown\r\n          languageChoice={languageChoice}\r\n          handleLanguageChoiceChange={handleLanguageChoiceChange}\r\n        />\r\n      </Box>\r\n      <Box\r\n        className=\"setting_languageProficiency\"\r\n        sx={{ marginBottom: 2, flexGrow: 1, marginTop: \"4px\", width: \"75%\" }}\r\n      >\r\n        <Divider\r\n          sx={{\r\n            width: \"100%\",\r\n            marginBottom: \"16px\",\r\n            borderColor: \"lightgrey\",\r\n            opacity: 0.2,\r\n          }}\r\n        />\r\n        <Typography sx={{ fontSize: \"14px\" }}>Language Proficiency</Typography>\r\n        <Box sx={{ width: \"300px\", marginTop: \"10px\" }}>\r\n          <Slider\r\n            value={languageProficiency}\r\n            min={0}\r\n            max={10}\r\n            step={1}\r\n            onChange={handleLanguageProficiencyChange}\r\n            valueLabelDisplay=\"auto\"\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyTextField.tsx",["70","71","72","73"],[],"import React, { useState, useEffect, MouseEvent, FocusEvent } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { InputAdornment, Tooltip } from \"@mui/material\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { blue } from \"@mui/material/colors\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { useMediaQuery } from \"@mui/material\";\r\nimport { Theme } from \"@mui/system\";\r\nimport { useTheme } from \"@mui/system\";\r\n\r\nconst theme = createTheme({\r\n  components: {\r\n    MuiInputLabel: {\r\n      styleOverrides: {\r\n        root: {\r\n          color: \"white\",\r\n        },\r\n      },\r\n    },\r\n    MuiOutlinedInput: {\r\n      styleOverrides: {\r\n        input: {\r\n          color: \"white\",\r\n        },\r\n        notchedOutline: {\r\n          \"&:hover\": {\r\n            borderColor: blue[500],\r\n          },\r\n          \"&.Mui-focused\": {\r\n            borderColor: blue[500],\r\n          },\r\n          borderColor: blue[500],\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\ninterface Message {\r\n  text: string;\r\n  isUser: boolean;\r\n}\r\n\r\ninterface MyTextFieldProps {\r\n  onSubmit: (inputValue: string) => void;\r\n  messages: Message[];\r\n}\r\n\r\n\r\nconst MyTextField: React.FC<MyTextFieldProps> = ({ onSubmit, messages }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (\r\n    event?: MouseEvent<SVGSVGElement> | React.FormEvent<HTMLFormElement>\r\n  ) => {\r\n    event?.preventDefault();\r\n    onSubmit(inputValue);\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      event.preventDefault();\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  const handleBlur = (\r\n    event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        paddingBottom: \"15px\",\r\n      }}\r\n    >\r\n      <Container maxWidth=\"md\">\r\n        <form onSubmit={handleSubmit}>\r\n          <ThemeProvider theme={theme}>\r\n            <TextField\r\n              id=\"textField\"\r\n              variant=\"outlined\"\r\n              value={inputValue}\r\n              label=\"Send a message...\"\r\n              onChange={handleInputChange}\r\n              onKeyPress={handleKeyPress}\r\n              multiline\r\n              maxRows={1}\r\n              fullWidth\r\n              autoFocus={true}\r\n              onBlur={handleBlur}\r\n              sx={{\r\n                \"& .MuiOutlinedInput-root:hover .MuiOutlinedInput-notchedOutline\":\r\n                  {\r\n                    borderColor: blue[500],\r\n                  },\r\n              }}\r\n              InputLabelProps={{\r\n                style: {\r\n                  fontFamily: \"Noto Sans, monospace\", // Set the font family\r\n                  fontSize: \"16px\", // Set the font size\r\n                },\r\n              }}\r\n              InputProps={{\r\n                style: {\r\n                  fontFamily: \"Noto Sans, monospace\", // Set the font family\r\n                  fontSize: \"16px\", // Set the font size\r\n                  textAlign: \"left\",\r\n                },\r\n\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <Tooltip title=\"Send it!\">\r\n                      <SendIcon\r\n                        sx={{\r\n                          color: blue[500],\r\n                          cursor: \"pointer\",\r\n                          \"&:hover\": {\r\n                            cursor: \"pointer\",\r\n                          },\r\n                        }}\r\n                        onClick={handleSubmit}\r\n                      />\r\n                    </Tooltip>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </ThemeProvider>\r\n        </form>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyTextField;\r\n","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyNavMenu.tsx",["74"],[],"import React from \"react\";\r\nimport Drawer from \"@mui/material/Drawer\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\n\r\ninterface MenuItem {\r\n  label: string;\r\n  icon: JSX.Element;\r\n  onClick: () => void;\r\n}\r\n\r\ninterface MyNavMenuProps {\r\n  drawerOpen: boolean;\r\n  handleClose: () => void;\r\n}\r\n\r\nexport default function MyNavMenu({\r\n  drawerOpen,\r\n  handleClose,\r\n}: MyNavMenuProps): JSX.Element {\r\n  // Get access to the useHistory hook from react-router-dom\r\n  const navigate = useNavigate();\r\n\r\n  // Items for the navigation menu\r\n  const menuItems: MenuItem[] = [\r\n    {\r\n      label: \"Chat\",\r\n      icon: <HomeIcon />,\r\n      onClick: () => {\r\n        navigate(\"/\");\r\n        handleClose();\r\n      },\r\n    },\r\n    {\r\n      label: \"Prompt Settings\",\r\n      icon: <SettingsIcon />,\r\n      onClick: () => {\r\n        navigate(\"/settings\");\r\n        handleClose();\r\n      },\r\n    },\r\n  ];\r\n\r\n  const username = \"Alex Diaconou\";\r\n\r\n  return (\r\n    <Drawer\r\n      variant=\"temporary\"\r\n      anchor=\"left\"\r\n      open={drawerOpen}\r\n      onClose={handleClose}\r\n      sx={{\r\n        width: \"240px\",\r\n        flexShrink: 0,\r\n        \"& .MuiDrawer-paper\": {\r\n          width: \"240px\",\r\n          boxSizing: \"border-box\",\r\n        },\r\n      }}\r\n    >\r\n      {/* Header with profile icon and username */}\r\n      <Box sx={{ display: \"flex\", alignItems: \"center\", padding: \"16px\" }}>\r\n        <Avatar sx={{ marginRight: \"8px\" }}>\r\n          <AccountCircleIcon />\r\n        </Avatar>\r\n        <Typography variant=\"h6\">{username}</Typography>\r\n      </Box>\r\n\r\n      <List>\r\n        {menuItems.map((item, index) => (\r\n          <ListItem button key={item.label} onClick={item.onClick}>\r\n            <ListItemIcon>{item.icon}</ListItemIcon>\r\n            <ListItemText primary={item.label} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\services\\openaiService.ts",[],[],"C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyChatWindow.tsx",["75","76"],[],"import React, { useRef, useEffect } from 'react';\r\nimport List from '@mui/material/List';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport { Typography } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\n\r\n\r\ninterface MyChatWindowProps {\r\n  messages: { text: string; isUser: boolean }[];\r\n}\r\n\r\nconst theme = createTheme({});\r\n\r\ndeclare namespace JSX {\r\n  interface IntrinsicElements {\r\n    div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\r\n  }\r\n}\r\n\r\nconst MyChatWindow: React.FC<MyChatWindowProps> = ({ messages }) => {\r\n  const bottomRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (bottomRef.current) {\r\n      bottomRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  const listItemStyle = {\r\n    paddingTop: '10px',\r\n    paddingBottom: '10px',\r\n  };\r\n\r\n  const textColor = '#ffffff';\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Box sx={{ marginTop: 'auto' }}>\r\n        <List\r\n          id=\"chatBox\"\r\n          sx={{\r\n            width: '100%',\r\n            paddingTop: '4px',\r\n          }}\r\n        >\r\n          {messages.map((message, index) => (\r\n            <ListItem key={index} style={listItemStyle}>\r\n              <ListItemText\r\n                primary={\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    style={{\r\n                      fontFamily: 'Noto Sans, monospace',\r\n                      fontSize: '13px',\r\n                      color: textColor,\r\n                    }}\r\n                  >\r\n                    {message.text}\r\n                  </Typography>\r\n                }\r\n                sx={{\r\n                  textAlign: 'left',\r\n                }}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n          <div ref={bottomRef} />\r\n        </List>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default MyChatWindow;","C:\\Users\\Alex Diaconou\\Code\\my-tutor-app-ts\\frontend\\src\\components\\MyDropDown.tsx",["77","78","79","80"],[],"import React from 'react';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { Box, Slider, Typography, Divider, MenuItem, Select, SelectChangeEvent } from '@mui/material';\r\nimport { blue } from '@mui/material/colors';\r\n\r\nconst customTheme = createTheme({\r\n  components: {\r\n    MuiOutlinedInput: {\r\n      styleOverrides: {\r\n        root: {\r\n          '&:hover .MuiOutlinedInput-notchedOutline': {\r\n            borderColor: blue[500],\r\n          },\r\n          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n            borderColor: blue[500],\r\n          },\r\n        },\r\n      },\r\n    },\r\n    MuiSelect: {\r\n      styleOverrides: {\r\n        icon: {\r\n          color: blue[500], // Set the color of the dropdown arrow\r\n        },\r\n        select: {\r\n          color: 'lightgrey',\r\n          fontSize: '13px', // Set the color of the selected item in the Select component\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\ninterface MyDropDownProps {\r\n  languageChoice: string;\r\n  handleLanguageChoiceChange: (event: SelectChangeEvent<string>) => void;\r\n}\r\n\r\nconst MyDropDown: React.FC<MyDropDownProps> = ({ languageChoice, handleLanguageChoiceChange }) => {\r\n  return (\r\n    <ThemeProvider theme={customTheme}>\r\n      <Select\r\n        value={languageChoice} // Use languageChoice prop to set the value of Select\r\n        onChange={handleLanguageChoiceChange} // Use handleLanguageChoiceChange prop to handle value changes\r\n        sx={{\r\n          marginTop: '10px',\r\n          marginBottom: '10px',\r\n          width: '150px',\r\n          height: '40px',\r\n          '& fieldset': {\r\n            borderColor: blue[500],\r\n          },\r\n        }}\r\n      >\r\n        <MenuItem value=\"Greek\">Greek</MenuItem>\r\n        <MenuItem value=\"French\">French</MenuItem>\r\n        <MenuItem value=\"Spanish\">Spanish</MenuItem>\r\n      </Select>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default MyDropDown;",{"ruleId":"81","severity":1,"message":"82","line":7,"column":8,"nodeType":"83","messageId":"84","endLine":7,"endColumn":16},{"ruleId":"81","severity":1,"message":"85","line":8,"column":8,"nodeType":"83","messageId":"84","endLine":8,"endColumn":12},{"ruleId":"81","severity":1,"message":"86","line":4,"column":15,"nodeType":"83","messageId":"84","endLine":4,"endColumn":19},{"ruleId":"81","severity":1,"message":"87","line":15,"column":10,"nodeType":"83","messageId":"84","endLine":15,"endColumn":23},{"ruleId":"81","severity":1,"message":"88","line":15,"column":25,"nodeType":"83","messageId":"84","endLine":15,"endColumn":41},{"ruleId":"89","severity":1,"message":"90","line":59,"column":6,"nodeType":"91","endLine":59,"endColumn":8,"suggestions":"92"},{"ruleId":"81","severity":1,"message":"93","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"94","line":9,"column":10,"nodeType":"83","messageId":"84","endLine":9,"endColumn":23},{"ruleId":"81","severity":1,"message":"95","line":10,"column":10,"nodeType":"83","messageId":"84","endLine":10,"endColumn":15},{"ruleId":"81","severity":1,"message":"96","line":11,"column":10,"nodeType":"83","messageId":"84","endLine":11,"endColumn":18},{"ruleId":"81","severity":1,"message":"97","line":13,"column":10,"nodeType":"83","messageId":"84","endLine":13,"endColumn":18},{"ruleId":"81","severity":1,"message":"86","line":8,"column":8,"nodeType":"83","messageId":"84","endLine":8,"endColumn":12},{"ruleId":"81","severity":1,"message":"98","line":17,"column":19,"nodeType":"83","messageId":"84","endLine":17,"endColumn":22},{"ruleId":"81","severity":1,"message":"99","line":3,"column":10,"nodeType":"83","messageId":"84","endLine":3,"endColumn":13},{"ruleId":"81","severity":1,"message":"100","line":3,"column":15,"nodeType":"83","messageId":"84","endLine":3,"endColumn":21},{"ruleId":"81","severity":1,"message":"101","line":3,"column":23,"nodeType":"83","messageId":"84","endLine":3,"endColumn":33},{"ruleId":"81","severity":1,"message":"102","line":3,"column":35,"nodeType":"83","messageId":"84","endLine":3,"endColumn":42},"@typescript-eslint/no-unused-vars","'MenuItem' is defined but never used.","Identifier","unusedVar","'Menu' is defined but never used.","'Grid' is defined but never used.","'viewportWidth' is assigned a value but never used.","'setViewportWidth' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserSettings'. Either include it or remove the dependency array.","ArrayExpression",["103"],"'useEffect' is defined but never used.","'useMediaQuery' is defined but never used.","'Theme' is defined but never used.","'useTheme' is defined but never used.","'Navigate' is defined but never used.","'JSX' is defined but never used.","'Box' is defined but never used.","'Slider' is defined but never used.","'Typography' is defined but never used.","'Divider' is defined but never used.",{"desc":"104","fix":"105"},"Update the dependencies array to be: [getUserSettings]",{"range":"106","text":"107"},[1949,1951],"[getUserSettings]"]