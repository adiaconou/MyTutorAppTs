{"ast":null,"code":"const apiKey = \"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\";\nconst headers = {\n  Authorization: `Bearer ${apiKey}`,\n  \"Content-Type\": \"application/json\"\n};\nconst promptGPT = async function (prompt) {\n  let maxTokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  const data = {\n    model: \"gpt-3.5-turbo\",\n    messages: [{\n      role: \"user\",\n      content: JSON.stringify(prompt)\n    }]\n  };\n  try {\n    console.log(\"TEST\");\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify(data)\n    });\n    const json = await response.json();\n    if (!json.choices) {\n      return \"Undefined\";\n    }\n    return json.choices[0].message.content;\n  } catch (error) {\n    console.error(\"Error: \", error);\n    return null;\n  }\n};\nexport default promptGPT;","map":{"version":3,"names":["apiKey","headers","Authorization","promptGPT","prompt","maxTokens","arguments","length","undefined","data","model","messages","role","content","JSON","stringify","console","log","response","fetch","method","body","json","choices","message","error"],"sources":["C:/Users/Alex Diaconou/Code/my-tutor-app-ts/frontend/src/services/openaiService.ts"],"sourcesContent":["const apiKey = \"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\";\r\n\r\nconst headers = {\r\n  Authorization: `Bearer ${apiKey}`,\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\ninterface Message {\r\n  role: string;\r\n  content: string;\r\n}\r\n\r\ninterface CompletionResponse {\r\n  choices?: {\r\n    message: {\r\n      content: string;\r\n    };\r\n  }[];\r\n}\r\n\r\nconst promptGPT = async (prompt: string, maxTokens: number = 50): Promise<string | null> => {\r\n  const data = {\r\n    model: \"gpt-3.5-turbo\",\r\n    messages: [{ role: \"user\", content: JSON.stringify(prompt) }] as Message[],\r\n  };\r\n\r\n  try {\r\n    console.log(\"TEST\");\r\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: headers,\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    const json = (await response.json()) as CompletionResponse;\r\n\r\n    if (!json.choices) {\r\n      return \"Undefined\";\r\n    }\r\n\r\n    return json.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error(\"Error: \", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default promptGPT;"],"mappings":"AAAA,MAAMA,MAAM,GAAG,qDAAqD;AAEpE,MAAMC,OAAO,GAAG;EACdC,aAAa,EAAG,UAASF,MAAO,EAAC;EACjC,cAAc,EAAE;AAClB,CAAC;AAeD,MAAMG,SAAS,GAAG,eAAAA,CAAOC,MAAc,EAAqD;EAAA,IAAnDC,SAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAC7D,MAAMG,IAAI,GAAG;IACXC,KAAK,EAAE,eAAe;IACtBC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACX,MAAM;IAAE,CAAC;EAC9D,CAAC;EAED,IAAI;IACFY,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACzEC,MAAM,EAAE,MAAM;MACdnB,OAAO,EAAEA,OAAO;MAChBoB,IAAI,EAAEP,IAAI,CAACC,SAAS,CAACN,IAAI;IAC3B,CAAC,CAAC;IAEF,MAAMa,IAAI,GAAI,MAAMJ,QAAQ,CAACI,IAAI,EAAyB;IAE1D,IAAI,CAACA,IAAI,CAACC,OAAO,EAAE;MACjB,OAAO,WAAW;IACpB;IAEA,OAAOD,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX,OAAO;EACxC,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/B,OAAO,IAAI;EACb;AACF,CAAC;AAED,eAAetB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}