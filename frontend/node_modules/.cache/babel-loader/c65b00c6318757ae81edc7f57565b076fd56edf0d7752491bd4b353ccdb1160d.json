{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex Diaconou\\\\Code\\\\my-tutor-app-ts\\\\frontend\\\\src\\\\components\\\\MyChatForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MyTextField from \"./MyTextField\";\nimport MyChatWindow from \"./MyChatWindow\";\nimport { Box } from \"@mui/material\";\nimport promptGPT from \"../services/openaiService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyChatForm = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);\n  const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\n  const updateViewportSize = () => {\n    setViewportHeight(window.innerHeight);\n    // setViewportWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', updateViewportSize);\n    return () => {\n      window.removeEventListener('resize', updateViewportSize);\n    };\n  }, []);\n  const handleTextSubmit = text => {\n    const userMessage = {\n      text,\n      isUser: true\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    const fetchResponse = async () => {\n      const response = await promptGPT(text);\n      if (response !== null) {\n        const aiMessage = {\n          text: response,\n          isUser: false\n        };\n        setMessages(prevMessages => [...prevMessages, aiMessage]);\n      }\n    };\n    fetchResponse();\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: `${viewportHeight}px`\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        overflowY: \"auto\",\n        backgroundColor: \"transparent\",\n        width: \"100%\",\n        maxWidth: \"md\",\n        marginTop: \"64px\",\n        '&::-webkit-scrollbar': {\n          width: '6px',\n          backgroundColor: 'transparent'\n        },\n        '&::-webkit-scrollbar-thumb': {\n          borderRadius: '3px',\n          backgroundColor: '#aaa'\n        },\n        '&::-webkit-scrollbar-track': {\n          borderRadius: '3px',\n          backgroundColor: 'transparent'\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(MyChatWindow, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: \"sticky\",\n        bottom: 0,\n        zIndex: 1,\n        backgroundColor: \"transparent\",\n        paddingBottom: \"15px\",\n        paddingTop: \"15px\",\n        width: \"100%\",\n        maxWidth: \"md\",\n        margin: \"0 auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MyTextField, {\n        messages: messages,\n        onSubmit: handleTextSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(MyChatForm, \"/oc0Hm7cUanFa2RcGylsW2bkfqY=\");\n_c = MyChatForm;\nexport default MyChatForm;\nvar _c;\n$RefreshReg$(_c, \"MyChatForm\");","map":{"version":3,"names":["React","useState","useEffect","MyTextField","MyChatWindow","Box","promptGPT","jsxDEV","_jsxDEV","MyChatForm","_s","messages","setMessages","viewportHeight","setViewportHeight","window","innerHeight","viewportWidth","setViewportWidth","innerWidth","updateViewportSize","addEventListener","removeEventListener","handleTextSubmit","text","userMessage","isUser","prevMessages","fetchResponse","response","aiMessage","sx","display","flexDirection","alignItems","justifyContent","height","children","flexGrow","overflowY","backgroundColor","width","maxWidth","marginTop","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","position","bottom","zIndex","paddingBottom","paddingTop","margin","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/Alex Diaconou/Code/my-tutor-app-ts/frontend/src/components/MyChatForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MyTextField from \"./MyTextField\";\r\nimport MyChatWindow from \"./MyChatWindow\";\r\nimport { Box, Grid } from \"@mui/material\";\r\nimport promptGPT from \"../services/openaiService\";\r\n\r\ninterface Message {\r\n  text: string;\r\n  isUser: boolean;\r\n}\r\n\r\nconst MyChatForm: React.FC = () => {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);\r\n  const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n\r\n  const updateViewportSize = () => {\r\n    setViewportHeight(window.innerHeight);\r\n    // setViewportWidth(window.innerWidth);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', updateViewportSize);\r\n    return () => {\r\n      window.removeEventListener('resize', updateViewportSize);\r\n    };\r\n  }, []);\r\n\r\n  const handleTextSubmit = (text: string) => {\r\n    const userMessage: Message = { text, isUser: true };\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n    const fetchResponse = async () => {\r\n      const response = await promptGPT(text);\r\n      if (response !== null) {\r\n        const aiMessage: Message = { text: response, isUser: false };\r\n        setMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n      }\r\n    };\r\n\r\n    fetchResponse();\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        height: `${viewportHeight}px`,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          flexGrow: 1,\r\n          overflowY: \"auto\",\r\n          backgroundColor: \"transparent\",\r\n          width: \"100%\",\r\n          maxWidth: \"md\",\r\n          marginTop: \"64px\",\r\n          \r\n          '&::-webkit-scrollbar': {\r\n            width: '6px',\r\n            backgroundColor: 'transparent',\r\n          },\r\n          '&::-webkit-scrollbar-thumb': {\r\n            borderRadius: '3px',\r\n            backgroundColor: '#aaa',\r\n          },\r\n          '&::-webkit-scrollbar-track': {\r\n            borderRadius: '3px',\r\n            backgroundColor: 'transparent',\r\n          }, \r\n        }}\r\n      >\r\n        <MyChatWindow messages={messages} />\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          position: \"sticky\",\r\n          bottom: 0,\r\n          zIndex: 1,\r\n          backgroundColor: \"transparent\",\r\n          paddingBottom: \"15px\",\r\n          paddingTop: \"15px\",\r\n          width: \"100%\",\r\n          maxWidth: \"md\",\r\n          margin: \"0 auto\",\r\n        }}\r\n      >\r\n        <MyTextField messages={messages} onSubmit={handleTextSubmit} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChatForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}